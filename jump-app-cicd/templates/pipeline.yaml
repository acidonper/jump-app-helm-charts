{{- range $key, $val := $.Values.global.apps }}
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-{{ $key }}-build
spec:
  params:
    - name: git-branch  
      type: string
    - name: git-commit
      type: string
    - name: app-git-url 
      type: string
    - name: functTestRepo 
      type: string
    - name: functTestRepoBranch 
      type: string
  workspaces:
   - name: app-source
 
  tasks:
    - name: app-git-clone
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
      - name: url
        value: $(params.app-git-url)
      - name: revision
        value: $(params.git-commit)
      - name: deleteExisting
        value: 'true'
      workspaces:
        - name: output
          workspace: app-source
    - name: app-test
      runAfter:
        - app-git-clone
      taskRef:
        name: task-{{ $val.type }}-new-commit-test
      workspaces:
        - name: source
          workspace: app-source
    - name: app-build-dev
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchDev }}"
      taskRef:
        name: task-new-commit-start-build-tag
      runAfter:
        - app-test
      params:
        - name: buildconfig
          value: '{{ $key }}-dev'
        - name: commit
          value: "$(params.git-commit)"
      workspaces:
        - name: source
          workspace: app-source
    - name: app-image-tag-commit-dev
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchDev }}"
      taskRef:
        name: task-new-commit-image-tag
      runAfter:
        - app-build-dev
      params:
        - name: imagestream
          value: '{{ $key }}'   
        - name: branch
          value: "{{ $.Values.gitBranchDev }}"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-argocd-generate-cred-secret
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchDev }}"
      taskRef:
        name: argocd-generate-secret
      runAfter:
        - app-image-tag-commit-dev
    - name: app-image-deploy-by-argocd-dev
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchDev }}"
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - app-argocd-generate-cred-secret
      params:
        - name: app
          value: '{{ $key }}'   
        - name: argoapp
          value: "{{ $.Values.namespaceDev }}"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-image-deployment-test-dev
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchDev }}"
      taskRef:
        name: task-new-commit-image-deployment-test
      runAfter:
         - app-image-deploy-by-argocd-dev
      params:
        - name: namespace
          value: "{{ $.Values.namespaceDev }}"
        - name: deployment
          value: "{{ $key }}"
        - name: version
          value: "v1"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-build-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-start-build-tag
      runAfter:
        - app-test
      params:
        - name: buildconfig
          value: '{{ $key }}-pre'
        - name: commit
          value: "$(params.git-commit)"
      workspaces:
        - name: source
          workspace: app-source
    - name: app-image-tag-commit-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-image-tag
      runAfter:
        - app-build-pre
      params:
        - name: imagestream
          value: '{{ $key }}'    
        - name: branch
          value: "{{ $.Values.gitBranchPro }}"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-argocd-generate-cred-secret-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: argocd-generate-secret
      runAfter:
        - app-image-tag-commit-pre
    - name: app-image-deploy-by-argocd-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - app-argocd-generate-cred-secret-pre
      params:
        - name: app
          value: '{{ $key }}'   
        - name: argoapp
          value: "{{ $.Values.namespacePre }}"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-image-deployment-test-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-image-deployment-test
      runAfter:
        - app-image-deploy-by-argocd-pre
      params:
        - name: namespace
          value: "{{ $.Values.namespacePre }}"
        - name: deployment
          value: "{{ $key }}"
        - name: version
          value: "v1"
        - name: commit
          value: "$(params.git-commit)"
    - name: test-app-git-clone
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      runAfter:
        - app-image-deployment-test-pre
      taskRef:
        kind: ClusterTask
        name: git-clone
      params:
      - name: url
        value: $(params.functTestRepo)
      - name: revision
        value: $(params.functTestRepoBranch)
      - name: deleteExisting
        value: 'true'
      workspaces:
        - name: output
          workspace: app-source
    - name: app-functional-tests-pre
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-pre-functional-tests
      runAfter:
        - test-app-git-clone
      params:
        - name: appurl
          value: 'https://{{ $.Values.functTestMicro }}-{{ $.Values.namespacePre }}.{{ $.Values.global.appsDomain }}'
      workspaces:
        - name: source
          workspace: app-source
    - name: app-image-tag-commit-pro
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-image-tag
      runAfter:
        - app-functional-tests-pre
      params:
        - name: imagestream
          value: '{{ $key }}'    
        - name: branch
          value: "{{ $.Values.gitBranchPro }}"
        - name: commit
          value: "production"
    - name: app-image-deploy-by-argocd-pro
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - app-image-tag-commit-pro
      params:
        - name: app
          value: '{{ $key }}'   
        - name: argoapp
          value: "{{ $.Values.namespacePro }}"
        - name: commit
          value: "$(params.git-commit)"
    - name: app-image-deployment-test-pro
      when:
        - input: $(params.git-branch)
          operator: in
          values:
            - "refs/heads/{{ $.Values.gitBranchPro }}"
      taskRef:
        name: task-new-commit-image-deployment-test
      runAfter:
        - app-image-deploy-by-argocd-pro
      params:
        - name: namespace
          value: "{{ $.Values.namespacePro }}"
        - name: deployment
          value: "{{ $key }}"
        - name: version
          value: "v1"
        - name: commit
          value: "$(params.git-commit)"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-{{ $key }}-build-init-images
spec:
  workspaces:
   - name: app-source
  tasks:
    - name: app-build-dev
      taskRef:
        name: task-new-commit-start-build-tag
      params:
        - name: buildconfig
          value: '{{ $key }}-dev'
        - name: commit
          value: '{{ $.Values.gitBranchDev }}'
      workspaces:
        - name: source
          workspace: app-source
    - name: app-build-pre
      taskRef:
        name: task-new-commit-start-build-tag
      params:
        - name: buildconfig
          value: '{{ $key }}-pre'
        - name: commit
          value: '{{ $.Values.gitBranchPro }}'
      workspaces:
        - name: source
          workspace: app-source
    - name: app-image-tag-pro
      taskRef:
        name: task-new-commit-image-tag
      runAfter:
        - app-build-pre
      params:
        - name: imagestream
          value: '{{ $key }}'   
        - name: branch
          value: "{{ $.Values.gitBranchPro }}"
        - name: commit
          value: "production"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pipeline-{{ $key }}-build-workspace-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
{{- end }}